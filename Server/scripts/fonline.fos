#ifndef __FONLINE__
#define __FONLINE__

// force AngelScript to read shared enums
#include "_defines.fos"
#include "_mutual.fos"

void finish()
{
    Log( "FINISH" );
}


#ifndef __CLIENT

uint loop()
{
	return( 10 );
}

#endif // !__CLIENT

#ifndef __MAPPER
#endif // !__MAPPER

#ifndef __SERVER
#endif // !__SERVER

#ifdef __CLIENT

void critter_action( bool localCall, CritterCl& cr, int action, int actionExt, ItemCl@ item )
{
}

void filename_logfile( string& filename )
{
}

void filename_screenshot( string& filename )
{
}

void critter_in( CritterCl& cr)
{
}

void critter_out( CritterCl& cr )
{
}

void item_inv_changed( ItemCl& itemNow, ItemCl& itemBefore )
{
}

void item_inv_in( ItemCl& item )
{
}

void item_inv_out( ItemCl& item )
{
}

void item_map_in( ItemCl& item )
{
}

void item_map_changed( ItemCl& item, ItemCl& itemBefore )
{
}

void item_map_out( ItemCl& item )
{
}

#endif // __CLIENT

#ifdef __MAPPER

void start()
{
}

#endif // __MAPPER

#ifdef __SERVER

void map_critter_in( Map& map, Critter& cr )
{
}

void map_critter_out( Map& map, Critter& cr )
{
}

void karma_voting( Critter& crFrom, Critter& crTo, bool valUp )
{
}

bool check_look( Map& map, Critter& cr, Critter& opponent )
{
    return( true );
}

bool items_barter( array<Item@>& saleItems, array<uint>& saleItemsCount, array<Item@>& buyItems, array<uint>& buyItemsCount, Critter& cr, Critter& trader )
{
    return( true );
}

void items_crafted( array<Item@>& items, array<uint>& itemsCount, array<Item@>& resources, Critter& cr )
{
}

void turn_based_begin( Map& map )
{
}

void turn_based_end( Map& map )
{
}

void turn_based_process(Map& map, Critter& cr, bool beginTurn )
{
}

void turn_based_sequence( Map& map, array<Critter@>& critters, Critter@ firstTurnCr )
{
}

void world_save( uint idx, array<uint>& deleteIdx )
{
}

#endif // __SERVER

#endif // __FONLINE__ //
